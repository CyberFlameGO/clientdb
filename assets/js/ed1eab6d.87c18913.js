"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[110],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=i,h=p["".concat(s,".").concat(m)]||p[m]||c[m]||a;return n?o.createElement(h,r(r({ref:t},u),{},{components:n})):o.createElement(h,r({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var d=2;d<a;d++)r[d]=n[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5747:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var o=n(7462),i=(n(7294),n(3905));const a={sidebar_position:4},r="Enhance entity view",l={unversionedId:"tutorial-basics/custom-view-values",id:"tutorial-basics/custom-view-values",title:"Enhance entity view",description:"In the previous section, we created a view that allows us to resolve relations between entities.",source:"@site/docs/tutorial-basics/custom-view-values.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/custom-view-values",permalink:"/tutorial-basics/custom-view-values",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Creating default values for entities",permalink:"/tutorial-basics/default-values"},next:{title:"Database context values",permalink:"/tutorial-basics/database-context"}},s={},d=[{value:"Using custom fields to query the database",id:"using-custom-fields-to-query-the-database",level:2},{value:"Creating custom &#39;methods&#39; in your view",id:"creating-custom-methods-in-your-view",level:2}],u={toc:d};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"enhance-entity-view"},"Enhance entity view"),(0,i.kt)("p",null,"In the previous section, we created a view that allows us to resolve relations between entities."),(0,i.kt)("p",null,"The view can also be used to define any custom values that will be available in our entities."),(0,i.kt)("p",null,"Let's define ",(0,i.kt)("inlineCode",{parentName:"p"},"isDone")," field that will be a boolean value based on weather ",(0,i.kt)("inlineCode",{parentName:"p"},"doneAt")," is null or not."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { defineEntity } from "@clientdb/core";\n\ninterface Todo {\n  id: string;\n  title: string;\n  doneAt: Date;\n}\n\nconst todoEntity = defineEntity<Todo>({\n  name: "todo",\n  fields: ["id", "title", "doneAt"],\n}).addView((todo, { db }) => {\n  return {\n    // highlight-next-line\n    get isDone() {\n      return todo.doneAt !== null;\n    },\n    // ...\n  };\n});\n')),(0,i.kt)("p",null,"Now we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDone")," field in every todo in our database"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const todo = db.entity(todoEntity).create({\n  title: "Learn clientdb",\n});\n\n// highlight-next-line\ntodo.isDone; // false\n\ntodo.update({ doneAt: new Date() });\n\n// highlight-next-line\ntodo.isDone; // true\n')),(0,i.kt)("h2",{id:"using-custom-fields-to-query-the-database"},"Using custom fields to query the database"),(0,i.kt)("p",null,"All custom fields are available when we query our database."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const completedTodosQuery = db.entity(todoEntity).query({\n  // highlight-next-line\n  isDone: true,\n});\n\nconst unfinishedTodosQuery = db.entity(todoEntity).query({\n  // highlight-next-line\n  isDone: false,\n});\n\nconst todo = db.entity(todoEntity).create({\n  title: "Learn clientdb",\n});\n\ncompletedTodosQuery.count; // 0\ncompletedTodosQuery.all; // []\nunfinishedTodosQuery.count; // 1\nunfinishedTodosQuery.all; // [todo]\n\ntodo.update({ doneAt: new Date() });\n\ncompletedTodosQuery.count; // 1\ncompletedTodosQuery.all; // [todo]\nunfinishedTodosQuery.count; // 0\nunfinishedTodosQuery.all; // []\n')),(0,i.kt)("p",null,"Note: queries are indexed by clientdb under the hood, so your queries will be very fast, even with 1000s of items in your database."),(0,i.kt)("h2",{id:"creating-custom-methods-in-your-view"},"Creating custom 'methods' in your view"),(0,i.kt)("p",null,"The view can define derived data like ",(0,i.kt)("inlineCode",{parentName:"p"},"isDone"),", but it can also include custom methods like ",(0,i.kt)("inlineCode",{parentName:"p"},"markAsDone")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { defineEntity } from "@clientdb/core";\n\ninterface Todo {\n  id: string;\n  title: string;\n  doneAt: Date;\n}\n\nconst todoEntity = defineEntity<Todo>({\n  name: "todo",\n  fields: ["id", "title", "doneAt"],\n  // highlight-next-line\n}).addView((todo, { db, updateSelf }) => {\n  return {\n    get isDone() {\n      return todo.doneAt !== null;\n    },\n    // highlight-next-line\n    markAsDone() {\n      // highlight-next-line\n      updateSelf({ doneAt: new Date() });\n    },\n    // highlight-next-line\n    markAsNotDone() {\n      // highlight-next-line\n      updateSelf({ doneAt: null });\n    },\n    // ...\n  };\n});\n')),(0,i.kt)("p",null,"We now used another utility passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"addView")," called ",(0,i.kt)("inlineCode",{parentName:"p"},"updateSelf")," that allows us to update our entity in the database."),(0,i.kt)("p",null,"We can now use those methods on any todo in our database"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const todo = db.entity(todoEntity).create({\n  title: "Learn clientdb",\n});\n\ntodo.isDone; // false\n// highlight-next-line\ntodo.markAsDone();\ntodo.isDone; // true\n')))}c.isMDXComponent=!0}}]);