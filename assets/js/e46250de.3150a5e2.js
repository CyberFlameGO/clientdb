"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[368],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>b});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=u(n),b=r,m=p["".concat(s,".").concat(b)]||p[b]||c[b]||o;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1239:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:4},i="Database context values",l={unversionedId:"tutorial-basics/database-context",id:"tutorial-basics/database-context",title:"Database context values",description:"It is very common that we'll have some common values that we'll use in our database.",source:"@site/docs/tutorial-basics/database-context.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/database-context",permalink:"/tutorial-basics/database-context",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Enchance entity view",permalink:"/tutorial-basics/custom-view-values"},next:{title:"Congratulations!",permalink:"/tutorial-basics/congratulations"}},s={},u=[{value:"Using context values as default values",id:"using-context-values-as-default-values",level:2}],d={toc:u};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"database-context-values"},"Database context values"),(0,r.kt)("p",null,"It is very common that we'll have some common values that we'll use in our database."),(0,r.kt)("p",null,"Such values might be:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"user id"),(0,r.kt)("li",{parentName:"ul"},"workspace id"),(0,r.kt)("li",{parentName:"ul"},"user role")),(0,r.kt)("p",null,"Those values can be declared when creating clientdb and will be available in many places across clientdb."),(0,r.kt)("p",null,"Example use cases:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"userId")," field on ",(0,r.kt)("inlineCode",{parentName:"li"},"todo")," entity that will default to current user id"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"todo.isOwnedByCurrentUser")," field that will be true if todo is owned by current user")),(0,r.kt)("p",null,"Let's write some code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { createDbContext, createClientDb } from "@clientdb/store";\n\n// highlight-next-line\nconst userIdContext = createDbContext<string>();\n\nconst db = createClientDb([todoEntitiy, listEntity], {\n  // highlight-next-line\n  contexts: [userIdContext("user-a")],\n});\n')),(0,r.kt)("p",null,"Our ",(0,r.kt)("inlineCode",{parentName:"p"},"db")," now has ",(0,r.kt)("inlineCode",{parentName:"p"},"userIdContext")," value of ",(0,r.kt)("inlineCode",{parentName:"p"},"user-a"),"."),(0,r.kt)("p",null,"Let's now extend our ",(0,r.kt)("inlineCode",{parentName:"p"},"todoEntity")," to have ",(0,r.kt)("inlineCode",{parentName:"p"},"isOwnedByCurrentUser")," field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'interface Todo {\n  id: string;\n  title: string;\n  doneAt: Date;\n  userId: string;\n}\n\nconst todoEntity = defineEntity<Todo>({\n  name: "todo",\n  fields: ["id", "title", "doneAt", "userId"],\n}).addView((todo, { db }) => {\n  return {\n    // highlight-next-line\n    get isOwnedByCurrentUser() {\n      // highlight-next-line\n      return todo.userId === db.getContextValue(userIdContext);\n    },\n    // ...\n  };\n});\n')),(0,r.kt)("p",null,"Now we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"isOwnedByCurrentUser")," field in every todo in our database"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const todo = db.entity(todoEntity).create({\n  title: "Learn clientdb",\n  userId: "user-a",\n});\n\n// highlight-next-line\ntodo.isOwnedByCurrentUser; // true\n\nconst anotherTodo = db.entity(todoEntity).create({\n  title: "Learn clientdb",\n  userId: "user-b",\n});\n\n// highlight-next-line\ntodo.isOwnedByCurrentUser; // false\n')),(0,r.kt)("h2",{id:"using-context-values-as-default-values"},"Using context values as default values"),(0,r.kt)("p",null,"We can also read context values as default values for our fields."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const todoEntity = defineEntity<Todo>({\n  name: "todo",\n  fields: ["id", "title", "doneAt", "listId", "userId"],\n  // highlight-next-line\n  getDefaultValues(db) {\n    return {\n      // highlight-next-line\n      userId: db.getContextValue(userIdContext),\n    };\n  },\n}).addView((todo, { db }) => {\n  // ...\n});\n')),(0,r.kt)("p",null,"Now, if we created todo without passing ",(0,r.kt)("inlineCode",{parentName:"p"},"userId")," - it will default to current user id."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const todo = db.entity(todoEntity).create({\n  title: "Learn clientdb",\n});\n\ntodo.userId; // "user-a"\n// highlight-next-line\ntodo.isownedByCurrentUser; // true\n')),(0,r.kt)("p",null,"Note:\nContext values are constant and has to be defined at the time of creating clientdb. If you'd like to modify context values, you'd have to create a new clientdb. We're planning to support mutable context values in the future."))}c.isMDXComponent=!0}}]);